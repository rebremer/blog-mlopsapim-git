# 0. Scripts based on following documentation
#
# https://docs.microsoft.com/en-us/azure/machine-learning/how-to-deploy-managed-online-endpoints
# https://docs.microsoft.com/en-us/azure/machine-learning/how-to-attach-arc-kubernetes?tabs=studio#azure-kubernetes-service-aks-

# 1. Install extensions
#
az extension add --name ml
az extension add --name connectedk8s
az extension add --name k8s-extension
az aks install-cli

# 2. variables
#
$rg="<<your resource group>>"
$aks="AKSinternallb" # if you change it here, change it in the endpoint.yml as well
$azureml="<<your azure ml workspace>>"
$endpoint="testprivendpoint" # if you change it here, change it in the endpoint.yml and blue-deployment.yml as well
$aks_vnet_name = "<<your resource vnet name>>"
$aks_vnet_address_range = '10.0.0.0/16'
$aks_subnet_aks_address_range = '10.0.2.0/24'
$aks_subnet_cidr_address_range = '10.100.0.0/24'
$dns_service_ip = '10.100.0.10'

# 3. Create VNET, subnet and retrieve resource id
#
az network vnet create -g $rg -n $aks_vnet_name --address-prefix $aks_vnet_address_range
az network vnet subnet create -g $rg --vnet-name $aks_vnet_name -n aks --address-prefixes $aks_subnet_aks_address_range
$subnetid = (az network vnet subnet show -g $rg -n aks --vnet-name $aks_vnet_name | ConvertFrom-Json).id

# 4. Create external AKS cluster
#
# https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni
az aks create --resource-group $rg --name $aks --network-plugin azure --vnet-subnet-id $subnetid --docker-bridge-address 172.17.0.1/16 --dns-service-ip $dns_service_ip --service-cidr $aks_subnet_cidr_address_range --generate-ssh-keys --enable-managed-identity -y --enable-private-cluster
az aks get-credentials --resource-group $rg --name $aks --overwrite-existing

# 5. Grant managed Identity of AKS network contributor rights
#
$aksobjectid = (az aks show -g $rg -n $aks | ConvertFrom-Json).identity.principalId
$vnetid = (az network vnet show -g $rg -n $aks_vnet_name | ConvertFrom-Json).id
# Make sure AKS MI has network contributor rights on Network in which internal load balancer is deployed
az role assignment create --assignee-object-id $aksobjectid --role "Network Contributor" --scope $vnetid

# 6. Create internal load balancer to AKS cluster
#
kubectl apply -f aks/internal-lb.yml

# 7. Install Azure ML extension on AKS cluster
#
az feature register --namespace Microsoft.ContainerService -n AKS-ExtensionManager
az k8s-extension create --name arcml-inference --extension-type Microsoft.AzureML.Kubernetes --cluster-type managedClusters --cluster-name $aks --config enableInference=True privateEndpointILB=True allowInsecureConnections=True --resource-group $rg --scope cluster --auto-upgrade-minor-version False
az k8s-extension show --name arcml-inference --cluster-type managedClusters --cluster-name $aks --resource-group $rg

# 8. Attach AKS cluster to AML workspace
#
# get your resource id of you aks cluster
$aks_id = (az aks show -g $rg -n $aks | ConvertFrom-Json).id
az ml compute attach -g $rg -w $azureml -n $aks -t Kubernetes --resource-id $aks_id

# 9. Create endpoints and deployments using yml files
#
az ml online-endpoint create -g $rg -w $azureml -n $endpoint -f endpoint/endpoint.yml
az ml online-deployment create --name blue --endpoint $endpoint -f endpoint/blue-deployment.yml --all-traffic  -g $rg -w $azureml
